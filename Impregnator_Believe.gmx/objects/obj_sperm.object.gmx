<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sperm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

spd_factor = 10;
device_tilt_x_min = 0.025;
device_tilt_y_min = 0.025;
device_tilt_x_max = 0.5;
device_tilt_y_max = 0.5;

if(!instance_exists(obj_tail)){
    tail = instance_create(x,y,obj_tail)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVE

//if display_get_orientation() = display_landscape

//MOVE

var device_tilt_x = device_get_tilt_x();
var device_tilt_y = device_get_tilt_y();


//check minimum &lt; between &lt; maximum
if (abs(device_tilt_x) &lt; device_tilt_x_min){
    x_spd = 0;
}else if (abs(device_tilt_x) &lt; device_tilt_x_max){
    x_spd = -(spd_factor * device_tilt_x);
}else{
    x_spd = -(spd_factor * device_tilt_x_max) *sign(device_tilt_x);
}

if (abs(device_tilt_y) &lt; device_tilt_y_min){
    y_spd = 0;
}else if (abs(device_tilt_y &lt; device_tilt_y_max)){
    y_spd = spd_factor * device_tilt_y;
}else{
    y_spd = spd_factor * device_tilt_y_max *sign(device_tilt_y);
}

x += x_spd;
y += y_spd;

//tail animation
tail.x = x;
tail.y = y;


if (sign(x_spd) || sign(x_spd) == 0){
    var x_is_positive = 1;
}else{
    var x_is_positive = -1;
}

if (sign(y_spd) || sign(y_spd) == 0){
    var y_is_positive = 1;
}else{
    var y_is_positive = -1;
}

//directional angle for tail direction
if (x_spd == 0){
    x_spd = 0.00001*sign(device_tilt_x);
}

if (y_spd == 0){
    y_spd = 0.00001*sign(device_tilt_y);
}

if(x_is_positive &amp;&amp; !y_is_positive){
    theta = radtodeg(arctan(abs(y_spd)/abs(x_spd)));

}else if(!x_is_positive &amp;&amp; !y_is_positive){
    theta = radtodeg(arctan(abs(x_spd)/abs(y_spd))) +90;

}else if(!x_is_positive &amp;&amp; y_is_positive){
    theta = radtodeg(arctan(abs(y_spd)/abs(x_spd))) +180;

}else if(x_is_positive &amp;&amp; y_is_positive){
    theta = radtodeg(arctan(abs(x_spd)/abs(y_spd))) +270;
}

tail.image_angle = theta;

/*
show_debug_message("device_get_tilt_x:");
show_debug_message(device_get_tilt_x());
show_debug_message("device_get_tilt_y:");
show_debug_message(device_get_tilt_y());
show_debug_message("theta:");
show_debug_message(theta);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
